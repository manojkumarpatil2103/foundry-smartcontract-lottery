// Layout of Contract:
// version
// imports
// errors
// interfaces, libraries, contracts
// Type declarations
// State variables
// Events
// Modifiers
// Functions

// Layout of Functions:
// constructor
// receive function (if exists)
// fallback function (if exists)
// external
// public
// internal
// private
// view & pure functions

// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

/**
 * @title A sample Raffle contract
 * @author Manoj kumar patil
 * @notice This contract is for creating a sample Raffle
 * @dev Implements Chainlink VRFv2.5
 */

import {VRFConsumerBaseV2Plus} from "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import {VRFV2PlusClient} from "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";

contract Raffle is VRFConsumerBaseV2Plus {
    /** Type Decleration */
    enum RaffleState {
        OPEN, // 0
        CALCULATING // 1
    }

    /* Errors */
    error Raffle__SendmoreToEnterRaffle();
    error Raffle__TransferFailed();
    error Raffle__RaffleNotOpen();
    error Raffle__UpeepNotNeeded(
        uint256 balance,
        uint256 playersLength,
        uint256 raffleState
    );

    uint16 private constant REQUEST_CONFIRMATIONS = 3;
    uint32 private constant NUM_WORDS = 1;
    uint256 private immutable i_entranceFee;
    // @dev The duration of the lottery in second.
    uint256 private immutable i_interval;
    bytes32 private immutable i_keyHash;
    uint256 private immutable i_subscriptionId;
    uint32 private immutable i_callbackGasLimit;
    uint256 private s_lastTimestamp;
    address private s_recentWinner;
    RaffleState private s_raffleState;
    address payable[] private s_players; // The list of players entering into the raffle
    // who ever wins it should be paid to them. then make it as a 'payable'.

    /**  EVENTS */
    event RaffleEntered(address indexed player);
    event WinnerPicked(address indexed winner);

    /**We need to use the constructor of inherited codebase(VRFConsumerBaseV2Plus),
     * Then it needs a vrfCoordinator address, will pass to our constructor
     * from our constructor to their constructor(VRFConsumerBaseV2Plus constructor)
     */

    constructor(
        uint256 entranceFee,
        uint256 interval,
        address vrfCoordinator,
        bytes32 gasLane,
        uint256 subscriptionId,
        uint32 callbackGasLimit
    ) VRFConsumerBaseV2Plus(vrfCoordinator) {
        i_entranceFee = entranceFee;
        i_interval = interval;
        i_keyHash = gasLane;
        i_subscriptionId = subscriptionId;
        i_callbackGasLimit = callbackGasLimit;

        s_lastTimestamp = block.timestamp;
        s_raffleState = RaffleState.OPEN; //It as same as RaffleState(0)
    }

    function enterRaffle() external payable {
        // require(msg.value >= i_entranceFee , "Not enough eth sent!");  // This is not gas efficient becoz, using a string to print consumes more gas
        // require(msg.value >= i_entranceFee, SendmoreToEnterRaffle());  // It works on specific compiler version (low level) newer version(v0.8.26)
        if (msg.value < i_entranceFee) {
            revert Raffle__SendmoreToEnterRaffle();
        }

        if (s_raffleState != RaffleState.OPEN) {
            revert Raffle__RaffleNotOpen();
        }

        s_players.push(payable(msg.sender)); // here payable keyword becoz, to receive an eth to the address.

        emit RaffleEntered(msg.sender); //Anytime you update the storage variable, then emit the event

        // Events helps in two ways
        // 1. Makes migeration easier
        // 2. Makes frontend "indexing" easier
    }

    // 1. get a random number
    // 2. use random number to pick a player

    // 3. Be automatically called
    //  When should the winner be picked ?
    /**
     * @dev This is the function that the chainlink nodes will call to see,
     * if the lottery is ready to have a winner picked.
     * The following should be true in order for upkeepNeeded to be true:
     * 1. The time interval has passed between raffle runs
     * 2. The lottery is open
     * 3. The contract has ETH (Has Players)
     * 4. Implicitly, your subscription has LINK
     * @param checkData - The checkData is defined when the Upkeep was registered. Not used in this example.
     * @return upkeepNeeded - true if it's time to restart the lottery
     * @return performData - The performData is generated by the Keeper's call to your checkUpkeep function. Not used in this example.
     */
    function checkUpkeep(
        bytes memory checkData
    ) public view returns (bool upkeepNeeded, bytes memory performData) {
        bool timeHasPassed = ((block.timestamp - s_lastTimestamp) >=
            i_interval);
        bool isOpen = s_raffleState == RaffleState.OPEN;
        bool hasBalance = address(this).balance > 0;
        bool hasPlayers = s_players.length > 0;
        upkeepNeeded = timeHasPassed && isOpen && hasBalance && hasPlayers;
        return (upkeepNeeded, checkData); // Return the checkData as performData
    }

    function performUpkeep(bytes calldata /* performData */) external {
        // check to see if enough time as passed
        (bool upkeepNeeded, ) = checkUpkeep("");
        if (!upkeepNeeded) {
            revert Raffle__UpeepNotNeeded(
                address(this).balance,
                s_players.length,
                uint256(s_raffleState)
            );
        }

        s_raffleState = RaffleState.CALCULATING;

        // Get our random number 2.5
        // 1. Request RNG
        // 2. Get RNG

        VRFV2PlusClient.RandomWordsRequest memory request = VRFV2PlusClient
            .RandomWordsRequest({
                keyHash: i_keyHash,
                subId: i_subscriptionId,
                requestConfirmations: REQUEST_CONFIRMATIONS,
                callbackGasLimit: i_callbackGasLimit,
                numWords: NUM_WORDS,
                extraArgs: VRFV2PlusClient._argsToBytes(
                    // Set nativePayment to true to pay for VRF requests with Sepolia ETH instead of LINK
                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})
                )
            }); //structure

        s_vrfCoordinator.requestRandomWords(request);
    }

    // CEI : checks, Effects, and Interactions pattern
    function fulfillRandomWords(
        uint256 /*requestId*/,
        uint256[] calldata randomWords
    ) internal override {
        // checks

        // s_player =10
        // random number(rng) = 12
        // 12 % 10 = 2
        // we get a big string like 868767857657744766878798978987767 % 10 = 9 (or somthing)

        // Effects (Internal Contract state)
        uint256 indexOfWinner = randomWords[0] % s_players.length; //randomWords[0] because we kept 1 for a NUM_WORDS
        address payable recentWinner = s_players[indexOfWinner];
        s_recentWinner = recentWinner;
        s_raffleState = RaffleState.OPEN;

        // Interactions  (External Contract Interactions)
        s_players = new address payable[](0); // becoz, there will be a players after entering a Raffle
        s_lastTimestamp = block.timestamp;
        emit WinnerPicked(s_recentWinner);

        (bool success, ) = recentWinner.call{value: address(this).balance}("");
        if (!success) {
            revert Raffle__TransferFailed();
        }
    }

    /** Getter function */
    function getEntranceFee() external view returns (uint256) {
        return i_entranceFee;
    }
}
